#!/usr/bin/env node

var ejs = require('ejs')
var fs = require('fs')
var mkdirp = require('mkdirp')
var path = require('path')
var program = require('commander')
var readline = require('readline')
var sortedObject = require('sorted-object')
var util = require('util')

var MODE_0666 = parseInt('0666', 8)
var MODE_0755 = parseInt('0755', 8)

var _exit = process.exit
var pkg = require('../package.json')

var version = pkg.version

// Re-assign process.exit because of commander
process.exit = exit

// CLI

around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

before(program, 'outputHelp', function () {
  // track if help was shown for unknown option
  this._helpShown = true
})

before(program, 'unknownOption', function () {
  // allow unknown options if help was shown, to prevent trailing error
  this._allowUnknownOption = this._helpShown

  // show help if not yet shown
  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
.version(version, '    --version')
.usage('[options] [dir]')
.option('-f, --force', 'force on non-empty directory')
.parse(process.argv)

if (!exit.exited) {
  main()
}

/**
 * Install an around function; AOP.
 */

 function around (obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) args[i] = arguments[i]
      return fn.call(this, old, args)
  }
}

/**
 * Install a before function; AOP.
 */

 function before (obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    fn.call(this)
    old.apply(this, arguments)
  }
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

 function confirm (msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  rl.question(msg, function (input) {
    rl.close()
    callback(/^y|yes|ok|true$/i.test(input))
  })
}

/**
 * Copy files from assets directory.
 */

 function copyTemplate (from, to) {
  from = path.join(__dirname, '..', 'assets', from)
  write(to, fs.readFileSync(from, 'utf-8'))
}

/**
 * Copy config files from config directory.
 */

function copyConfig (from, to) {
  from = path.join(__dirname, '..', 'assets/config', from)
  write(to, fs.readFileSync(from, 'utf-8'))
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

 function createApplication (name, path) {
  var wait = 5

  console.log()
  function complete () {
    if (--wait) return
      var prompt = launchedFromCmd() ? '>' : '$'

    console.log()
    console.log('   install dependencies:')
    console.log('     %s cd %s && yarn install', prompt, path)
    console.log()
    console.log('   run the app:')

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & yarn start', prompt, name)
    } else {
      console.log('     %s DEBUG=%s:* yarn start', prompt, name)
    }

    console.log()
  }

  mkdir(path, function () {
    // package.json
    var pkg = {
      name: name,
      version: '0.0.0',
      private: true,
      scripts: {
        'start': 'yarn dev:start',
        'dev:start': 'nodemon -e js,jsx --ignore lib --ignore dist --exec babel-node src/server',
        'dev:wds': 'webpack-dev-server --progress',
        'prod:build': 'rimraf lib dist && babel src -d lib --ignore .test.js && cross-env NODE_ENV=production webpack -p --progress',
        'prod:start': 'cross-env NODE_ENV=production pm2 start lib/server && pm2 logs',
        'prod:stop': 'pm2 delete server',
        'lint': 'eslint src webpack.config.babel.js --ext .js,.jsx',
        'test': 'yarn lint && flow && jest --coverage',
        'precommit': 'yarn test',
        'prepush': 'yarn test && yarn prod:build',
        'beanstalk': 'node lib/server'
      },
      browserslist: [
      '> 1%'
      ],
      devDependencies: {
        'babel-cli': '^6.24.1',
        'babel-core': '^6.24.1',
        'babel-eslint': '^7.2.3',
        'babel-jest': '^19.0.0',
        'babel-loader': '^7.0.0',
        'babel-plugin-flow-react-proptypes': '^2.1.3',
        'babel-preset-env': '^1.4.0',
        'babel-preset-flow': '^6.23.0',
        'babel-preset-react': '^6.24.1',
        'cross-env': '^4.0.0',
        'eslint': '^3.15.0',
        'eslint-config-airbnb': 'latest',
        'eslint-plugin-compat': '^1.0.2',
        'eslint-plugin-flowtype': '^2.32.1',
        'eslint-plugin-import': '^2.2.0',
        'eslint-plugin-jsx-a11y': '^3.0.2 || ^4.0.0',
        'eslint-plugin-react': '^6.9.0',
        'flow-bin': '^0.45.0',
        'husky': '^0.13.3',
        'jest': '^19.0.2',
        'nodemon': '^1.11.0',
        'pm2': '^2.4.6',
        'rimraf': '^2.6.1',
        'webpack': '^2.4.1',
        'webpack-dev-server': '^2.4.5'
      },
      dependencies: {
        'babel-polyfill': '^6.23.0',
        'compression': '^1.6.2',
        'express': '^4.15.2',
        'immutable': '4.0.0-rc.2',
        'react': '^15.5.4',
        'react-dom': '^15.5.4',
        'react-hot-loader': 'next',
        'react-redux': '^5.0.4',
        'redux': '^3.6.0',
        'redux-actions': '^2.0.2'
      }
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies)

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2) + '\n')
    mkdir(path + '/src', function () {
      mkdir(path + '/src/client', function () {
        copyTemplate('src/client/app.jsx', path + '/src/client/app.jsx')
        copyTemplate('src/client/index.jsx', path + '/src/client/index.jsx')
        mkdir(path + '/src/client/action', function () {
          copyTemplate('src/client/action/hello.js', path + '/src/client/action/hello.js')
          complete()
        })
        mkdir(path + '/src/client/reducer', function () {
          copyTemplate('src/client/reducer/hello.js', path + '/src/client/reducer/hello.js')
          complete()
        })
      })
      mkdir(path + '/src/server', function () {
        copyTemplate('src/server/app.js', path + '/src/server/app.js')
        copyTemplate('src/server/index.js', path + '/src/server/index.js')
        complete()
      })
      mkdir(path + '/src/shared', function () {
        var config = loadTemplate('src/shared/config.js')
        config.locals.name = name
        write(path + '/src/shared/config', config.render())
        copyTemplate('src/shared/util.js', path + '/src/shared/util.js')
        complete()
      })
    })

    copyConfig('/gitignore', path + '/.gitignore')
    copyConfig('/babelrc', path + '/.babelrc')
    copyConfig('/editorconfig', path + '/.editorconfig')
    copyConfig('/eslintrc.json', path + '/.eslintrc.json')
    copyConfig('/flowconfig', path + '/.flowconfig')
    copyConfig('/webpack.config.babel.js', path + '/webpack.config.babel.js')
    complete()
  })
}

/**
 * Create an app name from a directory path, fitting npm naming requirements.
 *
 * @param {String} pathName
 */

 function createAppName (pathName) {
  return path.basename(pathName)
  .replace(/[^A-Za-z0-9.()!~*'-]+/g, '-')
  .replace(/^[-_.]+|-+$/g, '')
  .toLowerCase()
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

 function emptyDirectory (path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && err.code !== 'ENOENT') throw err
      fn(!files || !files.length)
  })
}

/**
 * Graceful exit for async STDIO
 */

 function exit (code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done () {
    if (!(draining--)) _exit(code)
  }

var draining = 0
var streams = [process.stdout, process.stderr]

exit.exited = true

streams.forEach(function (stream) {
    // submit empty write request and wait for completion
    draining += 1
    stream.write('', done)
  })

done()
}

/**
 * Determine if launched from cmd.exe
 */

 function launchedFromCmd () {
  return process.platform === 'win32' &&
  process.env._ === undefined
}

/**
 * Load template file.
 */

 function loadTemplate (name) {
  var contents = fs.readFileSync(path.join(__dirname, '..', 'assets', (name + '.ejs')), 'utf-8')
  var locals = Object.create(null)

  function render () {
    return ejs.render(contents, locals)
  }

  return {
    locals: locals,
    render: render
  }
}

/**
 * Main program.
 */

 function main () {
  // Path
  var destinationPath = program.args.shift() || '.'

  // App name
  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath)
    } else {
      console.log('####################\n##                ##\n##     Camper     ##\n##     v' + version + '     ##\n##                ##\n####################')
      program.outputHelp()
    }
  })
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

 function mkdir (path, fn) {
  mkdirp(path, MODE_0755, function (err) {
    if (err) throw err
      console.log('   \x1b[36mcreate\x1b[0m : ' + path)
    fn && fn()
  })
}

/**
 * Generate a callback function for commander to warn about renamed option.
 *
 * @param {String} originalName
 * @param {String} newName
 */

 function renamedOption (originalName, newName) {
  return function (val) {
    warning(util.format("option `%s' has been renamed to `%s'", originalName, newName))
    return val
  }
}

/**
 * Display a warning similar to how errors are displayed by commander.
 *
 * @param {String} message
 */

 function warning (message) {
  console.error()
  message.split('\n').forEach(function (line) {
    console.error('  warning: %s', line)
  })
  console.error()
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

 function write (path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || MODE_0666 })
  console.log('   \x1b[36mcreate\x1b[0m : ' + path)
}
